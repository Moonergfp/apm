package apm.modules.message.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import apm.common.core.Page;
import apm.common.service.BaseService;
import apm.common.utils.StringUtils;

import apm.modules.message.entity.PublishMessage;
import apm.modules.message.dao.PublishMessageDao;
import apm.modules.program.entity.PublishProgram;
import apm.modules.program.entity.PublishProgramTimeSettings;
import apm.modules.program.service.PublishProgramTimeSettingsService;
import apm.modules.sys.support.Users;
import apm.modules.terminal.service.TerminalService;

import org.apache.lucene.index.Term;
import org.apache.lucene.search.BooleanClause;
import org.apache.lucene.search.BooleanClause.Occur;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.Sort;
import org.apache.lucene.search.TermQuery;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * 发布 消息实体类Service
 * @author gfp
 * @version 2015-09-08
 */
@Service
@Transactional(readOnly = true)
public class PublishMessageService extends BaseService<PublishMessageDao, PublishMessage> {

	//注入其他的Dao层或本层
	@Autowired
	private PublishMessageDao publishMessageDao;
	@Autowired
	private TerminalService terminalService;
	@Autowired
	private PublishProgramTimeSettingsService publishProgramTimeSettingsService;
	//查找所有发布 消息实体类(未删除)的记录
	public List<PublishMessage> findAll() {
		return dao.findAll();
	}
	
	//发布 消息实体类列表多条件查询，分页
	public Page<PublishMessage> find(Page<PublishMessage> page, PublishMessage publishMessage) {
		DetachedCriteria dc = dao.createDetachedCriteria();
		if (StringUtils.isNotEmpty(publishMessage.getRemarks())){
			dc.add(Restrictions.like("remarks", "%"+publishMessage.getRemarks()+"%"));
		}
		dc.add(Restrictions.eq(PublishMessage.DEL_FLAG, PublishMessage.DEL_FLAG_NORMAL));
		dc.addOrder(Order.desc("id"));
		return publishMessageDao.find(page, dc);
	}
	
	//保存发布 消息实体类信息
	@Transactional(readOnly = false)
	public void save(PublishMessage publishMessage) {
		dao.clear();
		dao.save(publishMessage);
	}
	
	//删除发布 消息实体类信息：逻辑删除 、通过ID号删除
	@Transactional(readOnly = false)
	public void delete(String id) {
		dao.deleteById(id);
	}
	
	/**
	 * 更新索引
	 */
	public void createIndex(){
		dao.createIndex();
	}
	
	/**
	 * 全文检索  
	 */
	public Page<PublishMessage> search(Page<PublishMessage> page, String q){
		
		// 设置查询条件
		BooleanQuery query = dao.getFullTextQuery(q, "name");
		//System.out.println(query);
		// 设置过滤条件
		BooleanQuery queryFilter = dao.getFullTextQuery(new BooleanClause(
				new TermQuery(new Term(PublishMessage.DEL_FLAG, String.valueOf(PublishMessage.DEL_FLAG_NORMAL))), Occur.MUST));
		//System.out.println(queryFilter);
		// 设置排序
		Sort sort = new Sort();
		// 全文检索
		dao.search(page, query, queryFilter, sort);
		// 关键字高亮
		dao.keywordsHighlight(query, page.getList(), "name");
		
		return page;
	}

	public Page<PublishMessage> findPubMsg(Page<PublishMessage> page,
			PublishMessage publishMessage) {
		String cId = Users.currentUser().getCompany().getId();
		DetachedCriteria dc = dao.createDetachedCriteria();
		dc.createAlias("office", "office");
		dc.createAlias("message", "message");
		dc.add(Restrictions.eq(PublishProgram.DEL_FLAG, PublishProgram.DEL_FLAG_NORMAL))
			.add(Restrictions.eq("office.id",cId));
		if(publishMessage != null){
			if(publishMessage.getOffice()!= null && StringUtils.isNotEmpty(publishMessage.getOffice().getName())){
				dc.add(Restrictions.like("office.name","%"+publishMessage.getOffice().getName()+"%"));
			}
			if(publishMessage.getMessage()!= null && StringUtils.isNotEmpty(publishMessage.getMessage().getName())){
				dc.add(Restrictions.like("message.name","%"+publishMessage.getMessage().getName()+"%"));
			}
			if(StringUtils.isNotEmpty(publishMessage.getCheckStatus())){
				String status = publishMessage.getCheckStatus();
				if(!("-1".equals(status))){
					dc.add(Restrictions.eq("checkStatus",status));
				}
			}
		}
		dc.addOrder(Order.desc("createDate"));
		page = dao.find(page, dc);
		List<PublishMessage> pubMsg = page.getList();
		for(int i =  0 ; i < pubMsg.size() ; i++){
			PublishMessage pubPro = pubMsg.get(i);
			//1.设置终端
			String terminalIds = pubPro.getTerminalIds();
			List<String> tIds = Arrays.asList(terminalIds.split(","));
			pubPro.setTerminals(terminalService.findByIds(tIds));
			//2.设置日期时间段
			String settingIds = pubPro.getPlayTimes();
			List<String> pubTimeIds = Arrays.asList(settingIds.split(","));
			List<PublishProgramTimeSettings> pubTimes = publishProgramTimeSettingsService.findByIds(pubTimeIds);
			if(pubTimes!= null && pubTimes.size() > 0){
				for(int j = 0 ;  j < pubTimes.size() ; j++){
					String timeSegment =  pubTimes.get(j).getTimeSegment();//时间段
					List<String> ts = Arrays.asList(timeSegment.split(","));
					List<String> ls = new ArrayList<>();
					for(int k = 0 ; k < ts.size() ; k+=2){
						ls.add(ts.get(k) + "~"+ts.get(k+1));
					}
					 pubTimes.get(j).setTimes(ls);
				}
			}
			pubPro.setTimeSettings(pubTimes);
		}
//		return pubPros;
		return page;
	}

	@Transactional(readOnly = false)
	public void checkPubMsg(PublishMessage pubMsg) {
		//1.修改数据库表记录
		dao.saveAndFlush(pubMsg);
		//2.向终端发送节目
	}
}
